#include<iostream>
#include<fstream>
#include<string>
#include<cstring>
#include<algorithm>
using namespace std;

//
struct student {
	char No[10];
	char ID[10];
	char FullName[10];
	char dateofBirth[10];
	char socialID[10];
};
//
void inputAStudent(student& s)
{
	cout << "nhap so thu tu: ";
	cin.getline(s.No, 10, '\n');
	cout << "nhap ma so sinh vien: ";
	cin.getline(s.ID, 10, '\n');
	cout << "nhap ho va ten: ";
	cin.getline(s.FullName, 10, '\n');
	cout << "nhap ngay sinh: ";
	cin.getline(s.dateofBirth, 10, '\n');
	cout << "nhap cmnd: ";
	cin.getline(s.socialID, 10, '\n');
	cin.ignore();
}
struct NodeStudent {
	student data;
	NodeStudent* next;
};
//
NodeStudent* createAStudent()
{
	student s;
	inputAStudent(s);
	NodeStudent* p = new NodeStudent;
	if (p == NULL)
	{
		return NULL;
	}
	else
	{
		p->data = s;
		p->next = NULL;
		return p;
	}
}
//
struct listStudent {
	NodeStudent* head;
	NodeStudent* tail;
};
//
void initListStudent(listStudent& l)
{
	l.head = NULL;
	l.tail = NULL;
}
//
void AddAStudentIntoClassAtFirst(listStudent& cla)
{
	NodeStudent* s = createAStudent();
	if (cla.head == NULL)
	{
		cla.head = s;
		cla.tail = s;
	}
	else
	{
		s->next = cla.head;
		cla.head = s;
	}
}
//
void AddAStudentIntoClassAtLast(listStudent& cla, NodeStudent* s)
{
	if (cla.head == NULL)
	{
		cla.head = s;
		cla.tail = s;
	}
	else
	{
		cla.tail->next = s;
		cla.tail = s;
	}
}
//
void inputListStudent(listStudent& l)
{
	int n;
	cout << "nhap so sinh vien: ";
	cin >> n;
	while (n--)
	{
		NodeStudent* p = createAStudent();
		AddAStudentIntoClassAtLast(l, p);
	}
}
//
void printListStudent(listStudent l)
{
	NodeStudent* cur = l.head;
	while (cur != NULL)
	{
		cout << "so thu tu: " << cur->data.No << "\n";
		cout << "id: " << cur->data.ID << "\n";
		cout << "ho ten: " << cur->data.FullName << "\n";
		cout << "cmnd: " << cur->data.socialID << "\n\n";
		cout << "ngay sinh: " << cur->data.dateofBirth << "\n";
		cur = cur->next;
	}
}
//
struct Classes {
	char name[9];
	listStudent l;
};
//
struct nodeClasses {
	Classes data;
	nodeClasses* next;
};
//
nodeClasses* createNodeClass()
{
	Classes c;
	cin.ignore();
	cout << "nhap ten lop hoc: ";
	cin.getline(c.name, 10);
	initListStudent(c.l);
	nodeClasses* p = new nodeClasses;
	if (p == NULL)
	{
		return NULL;
	}
	else
	{
		p->data = c;
		p->next = NULL;
		return p;
	}
}
struct listClasses {
	nodeClasses* head;
	nodeClasses* tail;
};
//
void initListClass(listClasses& cla)
{
	cla.head = NULL;
	cla.tail = NULL;
}
//
void addAclassAtFirst(listClasses& l, nodeClasses* p)
{
	nodeClasses* c = new nodeClasses;
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		p->next = l.head;
		l.head = p;
	}
}
//
void addAclassAtLast(listClasses& l, nodeClasses* p)
{
	nodeClasses* c = new nodeClasses;
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
//
struct SchoolYear {
	char name[10];
	listClasses x;
};
//
void inputAschoolYear(SchoolYear& s)
{
	cout << "nhap ten nam hoc: ";
	cin.getline(s.name, 10);
	initListClass(s.x);
	cin.ignore();
}
struct nodeSchoolYear {
	SchoolYear schData;
	nodeSchoolYear* next;
};
//
nodeSchoolYear* createNodeSY(SchoolYear& sy)
{
	inputAschoolYear(sy);
	nodeSchoolYear* p = new nodeSchoolYear;
	if (p == NULL)
	{
		return NULL;
	}
	else
	{
		p->schData = sy;
		p->next = NULL;
		return p;
	}
}
struct listSchoolYear {
	nodeSchoolYear* head;
	nodeSchoolYear* tail;
};
//
void AddASchoolYearAtFirst(listSchoolYear& l, nodeSchoolYear* p)
{
	if (l.head == NULL)
	{
		l.head = p;
		l.tail = p;
	}
	else
	{
		p->next = l.head;
		l.head = p;
	}
}
//
void AddASchoolYearAtLast(listSchoolYear& l, nodeSchoolYear* p)
{
	if (l.head == NULL)
	{
		l.head = p;
		l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
//
void initListSY(listSchoolYear& l)
{
	l.head = NULL;
	l.tail = NULL;
}
//
void printListSY(listSchoolYear& l)
{
	nodeSchoolYear* cur = l.head;
	while (cur != NULL)
	{
		cout << "nam hoc: " << cur->schData.name << "\n";
		cur = cur->next;
	}
}
//
void MenuStaff()
{
	SchoolYear sch;
	listSchoolYear l;

	cout << "1. Begin a school year.\n";
	cout << "2. Create a class.\n";
	cout << "3. Add a student.\n";
	cout << "4. Create a semester.\n";
	cout << "5. Create a course registation session.\n";
	cout << "6. View list of course.\n";
	cout << "7.pdate course information.\n";
	cout << "8.delete course.\n";
	int choice = 0;
	cout << "lua chon cua ban: ";
	cin >> choice;
	if (choice == 1)
	{
		cout << "1. Create a class.\n";
		cout << "2. Exit.\n";
		int choice1 = 0;
		cout << "lua chon cua ban: ";
		cin >> choice1;
		if (choice1 == 1)
		{
			cout << "1. Add a student.\n";
			cout << "2. Exit.\n";
		}
		else
		{
			MenuStaff();
		}
	}
	else if (choice == 2)
	{
	
	}
	else if (choice == 3)
	{
	}
}
//
void MenuStudent()
{
	cout << "-----STUDENT MENU-----\n";
	cout << "1.Log in\n";
	cout << "2.Enroll\n";
	cout << "3.view list of enrolled courses\n";
	cout << "4.remove a course from enrolled list\n";
	cout << "5.view list of my course\n";
	cout << "6.view list of classes\n";
	cout << "7.view list of student in a class\n";
	cout << "7.view list of course\n";
	cout << "8.view list of student in a course\n";
	int choice = 0;
	cout << "lua chon cua ban: ";
	cin >> choice;
}
//
void MainMenu()
{
	cout << "-----MENU-----\n";
	cout << "1. Staff.\n";
	cout << "2. Student.\n";
	int choice = 0;
	cout << "Lua chon cua ban: ";
	cin >> choice;
	if (choice == 1)
	{
		MenuStaff();
	}
	else if (choice == 2)
	{
		MenuStudent();
	}
}
//
void Login()
{
	string
		command, //to choose what to do each time
		name, password, //the ones that are found in the file
		inName, inPassword, //the ones you are going to input from keyboard
		registerName, registerPassword; //also what you're going to input
		//and if you know C strings, just replace that with something like
		/*
		char
		command[9],
		name[31], password[31], //it could be any size, but like this you have got 30 characters at your
		//disposal, if you consider it to be enough
		inName[31], inPassword[31],
		registerName[31], registerPassword[31];
		*/
	while (1)
	{
		cout << "(register/exit/login)\n"
			<< "Command: ";
		getline(cin, command);
		//(for C strings)
		//cin.get(command, 9);
		//cin.get();
		if (command == "exit") //(for C strings) if (!strcmp(command, "exit"))
		{
			return;
		}
		if (command == "register") //(for C strings) if (!strcmp(command, "register"))
		{
			//open file for registration
			ofstream g("registration.txt"); //ofstream is the one for getting data from the file, 
			//and the file does not even have to exist. If it's ofstream, it'll take care of it for you.
			//but be warned that if there is a file called "registration.txt" in the name folder as the
			//.exe file, the contents will be deleted
			if (!g.is_open()) //if it's not open, then there is no such file with the given name inside
			//the folder (that is, in the folder where the .exe file is going to be)
			{
				cout << "could not open file\n"; //just so that you know why it won't work if it doesn't
				return;
			}
			cout << "\n\n\n" //3 newlines
				<< "New Username: ";
			getline(cin, registerName); //input from keyboard will go into registerName
			cout << "New Password: ";
			getline(cin, registerPassword); //input from keyboard will go into registerPassword
			g << registerName; //this basically says "put whatever's to the right (registerName) into
			//g ("registration.txt")".
			g << '\n'; //and now there will be a new line
			g << registerPassword; //and now the password
			//all placed safely in the file that g opened
			g.close(); //always make sure you close the file, or else you might end up with some nasty
			//stuff in the memory
		}
		if (command == "login") //(for C strings) if (!strcmp(command, "login"))
		{
			//open file, and then put the name and password into the strings
			ifstream f("registration.txt"); //ifstream is the one for getting data from the file, and
			//let us assume you've already created a file called "registration.txt"
			if (!f.is_open()) //if it's not open, then there is no such file with the given name inside
			//the folder (that is, in the folder where the .exe file is going to be)
			{
				cout << "could not open file\n"; //just so that you know why it won't work if it doesn't
				return;
			}
			getline(f, name, '\n'); //reads the user name from file f (which is using "registration.txt")
			getline(f, password, '\n'); //reads the password from file f (which is using "registration.txt")
			//also, if you tell the file to get you that text up until '\n', that's when you know it reads
			//the whole line at most, and won't go any further
			//and that is done by the 3rd parameter
			f.close(); //you don't need it open now, since you have the name and password from the file

			//login
			while (1)
			{
				//you are going to input the name and password here
				cout << "\n\n\n"
					<< "Enter Username: ";
				getline(cin, inName);
				cout << "Enter Password: ";
				getline(cin, inPassword);
				//or this, if you are working with C strings (second version of declaration)
				//cin.get(inName, 31);
				//cin.get();
				//cin.get(inPassword, 31);
				//cin.get();
				//and the "cin.get()" after each input line is necessary, or else[...]
				//no idea what's happening inside istream, but it's mandatory if you don't want your
				//input to get stuck or worse
				if (inName == name && inPassword == password)
				{
					cout << "Login Successful\n" //the '\n' is a character, so that's why I can add it 
					//and it will automatically output a newline in console, alongside the string
						<< "Welcome, "
						<< inName;
					break; //just exit the while loop if you've entered the valid account
				}
				cout << "incorrect name or password\n"; //if you haven't entered the valid account,
				//then the while loop is not done yet. So that's why this output is without condition
			}
			//now do something about the account
		}
		cout << "\n\n\n\n\n"; //give it 5 newlines
	}
}
//
int main()
{
	listSchoolYear l;
	initListSY(l);
	SchoolYear sy;
	nodeSchoolYear* p = createNodeSY(sy);
	AddASchoolYearAtLast(l, p);
	printListSY(l);
	nodeClasses* c = createNodeClass();
	nodeClasses* cl = createNodeClass();
	addAclassAtLast(l.head->schData.x, cl);
	return 0;
}
